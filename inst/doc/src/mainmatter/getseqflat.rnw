\documentclass{article}
\input{../config/commontex}

\title{Importing sequences from flat files}

\author{Charif, D. \and Lobry, J.R.}

\begin{document}
\SweaveInput{../config/commonrnw.rnw}
\maketitle
\tableofcontents
% BEGIN - DO NOT REMOVE THIS LINE


\section{Importing raw sequence data from FASTA files}

\subsection{FASTA files examples}

The FASTA format is very simple and widely used for simple import of
biological sequences. It was used originally by the FASTA program \cite{FASTA}.
It begins with a single-line description starting
with a character \texttt{'>'}, followed by lines of sequence data
of maximum 80 character each. Lines starting with a semi-colon
character \texttt{';'} are comment lines. Examples of files in FASTA format
are distributed with the \seqinr{} package in the \texttt{sequences}
directory:

<<fastafiles,eval=T>>=
list.files(path = system.file("sequences", package = "seqinr"), pattern = ".fasta")
@

Here is an example of a FASTA file:

<<fastaexample,fig=F>>=
cat(readLines(system.file("sequences/seqAA.fasta", package = "seqinr")), sep = "\n")
@

Here is an example of a FASTA file with comment lines:

<<fastaexamplelegacy,fig=F>>=
cat(readLines(system.file("sequences/legacy.fasta", package = "seqinr")), sep = "\n")
@

\subsection{The function \texttt{read.fasta()}}

The function \texttt{read.fasta()} imports sequences from FASTA files
into your workspace.

\subsubsection{DNA file example}

The example file looks like:

<<examplefastadnafile,eval=T>>=
dnafile <- system.file("sequences/malM.fasta", package = "seqinr")
cat(readLines(dnafile), sep = "\n")
@

With default arguments the output looks like:

<<dna1, eval=T>>=
read.fasta(file = dnafile)
@

As from \seqinr{} 1.0-5 the automatic conversion of sequences into vector
of single characters can be neutralized, for instance:

<<dna2,eval=T>>=
read.fasta(file = dnafile, as.string = TRUE)
@

Forcing to lower case letters can be disabled this way:

<<dna3,eval=T>>=
read.fasta(file = dnafile, as.string = TRUE, forceDNAtolower = FALSE)
@


\subsubsection{Protein file example}

The example file looks like:

<<examplefastaProtfile,eval=T>>=
aafile <-  system.file("sequences/seqAA.fasta", package = "seqinr")
cat(readLines(aafile), sep = "\n")
@

Read the protein sequence file, looks like:

<<readfasta, eval=T>>=
read.fasta(aafile, seqtype = "AA")
@

The same, but as string and without attributes setting, looks like:

<<readfasta2,eval=T>>=
read.fasta(aafile, seqtype = "AA", as.string = TRUE, set.attributes = FALSE)
@

\subsection{The function \texttt{write.fasta()}}

This function writes sequences to a file in FASTA format.
Read 3 coding sequences sequences from a FASTA file:

<<read3seq,eval=T>>=
ortho <- read.fasta(file = system.file("sequences/ortho.fasta", package = "seqinr"))
length(ortho)
ortho[[1]][1:12]
@

Select only third codon positions:

<<selecttcp,eval=T>>=
ortho3 <- lapply(ortho, function(x) x[seq(from = 3, to = length(x), by = 3)])
ortho3[[1]][1:4]
@

Write the modified sequences to a file:

<<writeortho3,results=hide,eval=T>>=
tmpf <- tempfile()
write.fasta(sequences = ortho3, names = names(ortho3), nbchar = 80, file.out = tmpf)
@

Read them again from the same file and check that sequences are preserved:

<<checkorto,eval=T>>=
ortho3bis <- read.fasta(tmpf, set.attributes = FALSE)
identical(ortho3bis, ortho3)
@

\subsection{Big room examples}

\subsubsection{Oriloc example (\textit{Chlamydia trachomatis} complete genome)}

A more consequent example is given in the fasta file \texttt{ct.fasta} which
contains the complete genome of \textit{Chlamydia trachomatis} that was
used in \cite{oriloc}. You should be able to reproduce figure 1b from this
paper with the following code:

<<oriloc, fig=TRUE, results = hide, eval=T>>=
out <- oriloc(seq.fasta = system.file("sequences/ct.fasta", package ="seqinr"),
      g2.coord = system.file("sequences/ct.coord", package = "seqinr"),
     oldoriloc = TRUE)
plot(out$st, out$sk/1000, type="l", xlab = "Map position in Kb",
         ylab = "Cumulated composite skew in Kb", 
         main = expression(italic(Chlamydia~~trachomatis)~~complete~~genome), las = 1)
abline(h = 0, lty = 2)
text(400, -4, "Terminus")
text(850, 9, "Origin")
@

Note that the algorithm has been improved since then and that it's
more advisable to use the default option \texttt{oldoriloc = FALSE}
if you are interested in the prediction of origins and terminus of
replication from base composition biases (more on this at
\url{http://pbil.univ-lyon1.fr/software/oriloc.html}). See also \cite{smorfland}
for a recent review on this topic.

<<oriloc2, fig=TRUE, results = hide, eval=T>>=
out <- oriloc(seq.fasta = system.file("sequences/ct.fasta", package ="seqinr"),
      g2.coord = system.file("sequences/ct.coord", package = "seqinr"))
plot(out$st, out$sk/1000, type="l", xlab = "Map position in Kb",
         ylab = "Cumulated composite skew in Kb", 
         main = expression(italic(Chlamydia~~trachomatis)~~complete~~genome), las = 1)
mtext("New version")
abline(h = 0, lty = 2)
text(400, -4, "Terminus")
text(850, 9, "Origin")
@

\subsubsection{Example with 21,161 proteins from \textit{Arabidobpsis thaliana}}

As from \seqinr{} 1.0-5 the automatic conversion of sequences into vector
of single characters and the automatic attribute settings can be neutralized, for
instance :

<<readfastaasstring, fig=F,eval=T>>=
smallAA <- system.file("sequences/smallAA.fasta", package = "seqinr")
read.fasta(smallAA, seqtype = "AA", as.string = TRUE, set.attributes = FALSE)
@

This is interesting to save time and space when reading large FASTA files.
\marginpar{\includegraphics[width=\marginparwidth]{../figs/ath}\\
\tiny{\textit{Arabidobpsis thaliana}. Source: wikipedia.}
}
Let's give a practical example. In their paper \cite{HannahMA2005},
Matthew Hannah, Arnd Heyer and Dirk Hincha were working on
\textit{Arabidobpsis thaliana} genes in order to detect those involved
in cold acclimation. They were interested by the detection of proteins called
hydrophilins, that had a mean hydrophilicity of over 1 and glycine
content of over 0.08 \cite{GarayArroyoA2000}, because they are though to be important
for freezing tolerance. The starting point was a FASTA file called
\texttt{ATH1\_pep\_cm\_20040228} downloaded from the Arabidopsis
Information Ressource (TAIR at \url{http://www.arabidopsis.org/}) 
which contains the sequences of 21,161 proteins.

<<readath,fig=F, eval=T>>=
athfile <- system.file("sequences/ATH1_pep_cm_20040228.fasta", package = "seqinr")
system.time(ath <- read.fasta(athfile, seqtype = "AA", as.string = TRUE, set.attributes = FALSE))
@

It's about 10 seconds here to read 21,161 protein sequences. We save them
in XDR binary format\footnote{
this is a multi-platform compatible binary format: you can save data
under unix and load them under Mac OS X, for instance, without problem.
} to read them faster later at will:

<<saveath,fig=F,eval=T>>=
save(ath, file = "ath.RData")
@
<<loadath,fig=F,eval=T>>=
system.time(load("ath.RData"))
@

Now it's less than a second to load the whole data set thanks to the XDR format.
The object size is about 15 Mo in RAM, that is something very close to
the flat file size on disk:

<<sizeath,fig=F,eval=T>>=
object.size(ath)/2^20
file.info(athfile)$size/2^20
@

Using strings for sequence storage is very comfortable when there is
an efficient function to compute what you want. For instance, suppose
that you are interested by the distribution of protein size in
\textit{Arabidopsis thaliana}. There is an efficient vectorized function
called \texttt{nchar()} that will do the job, we just have to remove
one unit because of the stop codon which is translated as a star (*) in
this data set. This is a simple and direct task under \Rlogo{}:

<<athdistriprotsize,fig=T,eval=T>>=
nres <- nchar(ath) - 1
hist(log10(nres), col = grey(0.7), xlab = "Protein size (log10 scale)",
ylab = "Protein count", 
main = expression(italic(Arabidopsis~~thaliana)))
@

However, sometimes it is more convenient to work with the single
character vector representation of sequences. For instance, to count
the number of glycine (G), we first play with one sequence, let's
take the smallest one in the data set:

<<playwithonesequence,fig=F,eval=T>>=
which.min(nres)
ath[[9523]]
s2c(ath[[9523]])
s2c(ath[[9523]]) == "G"
sum(s2c(ath[[9523]]) == "G")
@

We can now easily define a vectorised function to count the number
of glycine:

<<ngly,fig=F,eval=T>>=
ngly <- function(data){
 res <- sapply(data, function(x) sum(s2c(x) == "G"))
 names(res) <- NULL
 return(res)
}
@

Now we can use \texttt{ngly()} in the same way that \texttt{nchar()} so
that computing glycine frequencies is very simple:

<<glycinefreq,fig=F,eval=T>>=
ngly(ath[1:10])
fgly <- ngly(ath)/nres
@

And we can have a look at the distribution:

<<histgly,fig=T,eval=T>>=
hist(fgly, col = grey(0.7), main = "Distribution of Glycine frequency",
xlab = "Glycine content", ylab = "Protein count")
abline(v = 0.08, col = "red")
legend("topright",inset=0.01,lty=1,col="red",legend="Threshold for hydrophilines")
@

Let's use a boxplot instead:

<<boxplotgly,fig=T,eval=T>>=
boxplot(fgly, horizontal = TRUE, col = grey(0.7), main = "Distribution of Glycine frequency",
xlab = "Glycine content", ylab = "Protein count")
abline(v = 0.08, col = "red")
legend("topright",inset=0.01,lty=1,col="red",legend="Threshold for hydrophilines")
@

The threshold value for the glycine content in hydrophilines is therefore
very close to the third quartile of the distribution:

<<summaryfgly,fig=F,eval=T>>=
summary(fgly)
@

We want now to compute something relatively more complex,
we want the Kyte and Doolittle \cite{KD} hydropathy score of our proteins
(aka GRAVY score). This is basically a linear form on amino
acid frequencies:

$$
s = \sum_{i = 1}^{20} \alpha_{i}f_{i}
$$
where $\alpha_{i}$ is the coefficient for amino acid number $i$ and
$f_{i}$ the relative frequency of amino acid number $i$. The coefficients
$\alpha_{i}$ are given in the \texttt{KD} component of the data set
\texttt{EXP}:

<<dataEXP,fig=F,eval=T>>=
data(EXP)
EXP$KD
@

This is for codons in lexical order, that is:

<<lexicalorder,fig=F,eval=T>>=
words()
@

But since we are working with protein sequences here we name the
coefficient according to their amino acid :

<<putexpkdnames,fig=F,eval=T>>=
names(EXP$KD) <- sapply(words(),function(x) translate(s2c(x)))
@

We just need one value per amino acid, we sort them in the lexical
order, and we reverse the scale so as to have positive values for
hydrophilic proteins as in \cite{HannahMA2005} :

<<kdc,fig=F,eval=T>>=
kdc <- EXP$KD[unique(names(EXP$KD))]
kdc <- -kdc[order(names(kdc))]
kdc
@

Now that we have the vector of coefficient $\alpha_{i}$, we need the
amino acid relative frequencies $f_{i}$, let's play with one protein
first:

<<playwithoneforkd,fig=F,eval=T>>=
ath[[9523]]
s2c(ath[[9523]])
table(s2c(ath[[9523]]))
table(factor(s2c(ath[[9523]]), levels = names(kdc)))
@

Now that we know how to count amino acids it's relatively easy thanks
to R's matrix operator \texttt{\%*\%} to
define a vectorised function to compute a linear form on amino acid
frequencies:

<<linform,fig=F,eval=T>>=
linform <- function(data, coef){
 f <- function(x){
   aaseq <- s2c(x)
   freq <- table(factor(aaseq, levels = names(coef)))/length(aaseq)
   return(coef %*% freq)
 }
 res <- sapply(data, f)
 names(res) <- NULL
 return(res)
}
kdath <- linform(ath,kdc)
@

Let's have a look at the distribution:

<<distriKD,fig=T,eval=T>>=
boxplot(kdath, horizontal = TRUE, col = grey(0.7),
main = "Distribution of Hydropathy index",
xlab = "Kyte and Doolittle GRAVY score")
abline(v = 1, col = "red")
legend("topleft",inset=0.01,lty=1,col="red",legend="Threshold for hydrophilines")
@

The threshold is therefore much more stringent here than the previous one on
glycine content. Let's define a vector of logicals to select the hydrophilines:

<<hydrophilinesindex,fig=F,eval=T>>=
hydrophilines <- fgly > 0.08 & kdath > 1
head(names(ath)[hydrophilines])
@

Check with a simple graph that there is no mistake here:

<<chekhydro,fig=T,eval=T>>=
library(MASS)
dst <- kde2d(kdath,fgly, n = 50)
filled.contour(x = dst, color.palette = topo.colors,
plot.axes = {
  axis(1)
  axis(2)
  title(xlab="Kyte and Doolittle GRAVY score", ylab = "Glycine content",
    main = "Hydrophilines location")
  abline(v=1, col = "yellow")
  abline(h=0.08, col = "yellow")
  points(kdath[hydrophilines], fgly[hydrophilines], col = "white")
  legend("topleft",inset=0.02,lty=1,col="yellow", bg="white", legend="Threshold for hydrophilines", cex = 0.8)
  }
)
@

Everything seems to be OK, we can save the results in a data frame:

<<hyd,fig=F,eval=T>>=
data.frame(list("name"=names(ath), 
"KD"=kdath, "Gly"=fgly)) -> athres
head(athres)
@

  
%
% Deleted because this table is a little bit too long
%
% We can also export the data frame in a \LaTeX~table:
%
%<<hydlatex,fig=F,eval=T>>=
%library(xtable)
%print(xtable(x = hyd, caption = "Hydrophilines from \\textit{Arabidopsis thaliana}.", 
%    label = "hyd", digits = c(0,0,0,3,3)), file = "hyd.tex", size = "tiny")
%@
%\input{hyd.tex}
%
%so as to generate table \ref{hyd}.

We want to check now that the results are consistent with those reported
previously. The following table is extracted from the file
\texttt{pgen.0010026.st003.xls} provided as the supplementary
material table S3 in \cite{HannahMA2005} and available at
\url{http://www.pubmedcentral.nih.gov/picrender.fcgi?artid=1189076&blobname=pgen.0010026.st003.xls}.
Only the protein names, the hydrophilicity and the glycine content were
extracted:

<<readhannah,fig=F,eval=T>>=
read.table(system.file("sequences/hannah.txt", package = "seqinr"), sep = "\t", header = TRUE)->hannah
head(hannah)
@

The protein names are not exactly the same because they have no extension.
As explained in \cite{HannahMA2005}, when multiple gene models 
were predicted only the first was one used. Then:

<<renamehannah,fig=F,eval=T>>=
hannah$AGI <- paste(hannah$AGI, "1", sep = ".")
head(hannah)
@

We join now the two data frames thanks to their common key:

<<jointure,fig=F,eval=T>>=
join <- merge(hannah, athres, by.x = "AGI", by.y = "name")
head(join)
@

Let's compare the glycine content :

<<comparegly,fig=T,eval=T>>=
plot(join$Glycine, join$Gly, xlab = "Glycine content in Hannah et al. (2005)",
ylab = "Glycine content here", main = "Comparison of Glycine content results")
abline(c(0,1), col = "red")
@

The results are consistent, we have just lost some resolution because
there are only two figures after the decimal point in the Excel\footnote{
this software is a real \textbf{pain} for the reproducibility of results.
This is well documented, see \url{http://www.burns-stat.com/pages/Tutor/spreadsheet_addiction.html}
and references therein.
} file. Let's have a look at the GRAVY score now:

<<comparekd,fig=T,eval=T>>=
plot(join$Hydrophilicity, join$KD, xlab = "GRAVY score in Hannah et al. (2005)",
ylab = "GRAVY score here", main = "Comparison of hydropathy score results", las = 1)
abline(c(0,-1), col = "red")
abline(v=0, lty=2)
abline(h=0, lty=2)
@

The results are consistent, it's hard to say whether the small differences
are due to Excel rounding errors or because the method used to compute the GRAVY
score was not exactly the same (in \cite{HannahMA2005} they used the
mean over a sliding window). 


\section{Importing aligned sequence data}

\subsection{Aligned sequences files examples}

\subsubsection{mase}

Mase format is a flatfile format use by the SeaView multiple alignment 
editor \cite{SeaView}, developed by Manolo Gouy and available at
\url{http://pbil.univ-lyon1.fr/software/seaview.html}.
The mase format is used to store nucleotide or protein multiple alignments. 
The beginning of the file must contain a header containing at least one line 
(but the content of this header may be empty). The header lines must 
begin by ;;. The body of the file has the following structure: First, each 
entry must begin by one (or more) commentary line. Commentary lines 
begin by the character ;. Again, this commentary line may be empty. 
After the commentaries, the name of the sequence is written on a separate line. 
At last, the sequence itself is written on the following lines.

<<masef,eval=T>>=
masef <- system.file("sequences/test.mase", package = "seqinr")
cat(readLines(masef), sep = "\n")
@

A screenshot copy of the same file as seen under SeaView is given in figure \ref{SeaView}.

\begin{figure}
\begin{center}
\end{center}
\includegraphics[width=\textwidth]{../figs/SeavView}
\caption{The file \texttt{test.mase} under SeaView. This is a graphical multiple 
sequence alignment editor developped by Manolo Gouy \cite{SeaView}. SeaView 
is able to read and write various alignment formats (NEXUS, MSF, CLUSTAL, 
FASTA, PHYLIP, MASE). It allows to manually edit the alignment, and also to 
run DOT-PLOT or CLUSTALW programs to locally improve the alignment.}
\label{SeaView}
\end{figure}

\subsubsection{clustal}

The CLUSTAL format (*.aln) is the format of the ClustalW multialignment tool 
output \cite{clustalw, clustal2005}. It can be described as follows. The word CLUSTAL is on the first line of 
the file. The alignment is displayed in blocks of a fixed length, each line in the 
block corresponding to one sequence. Each line of each block starts with the 
sequence name (maximum of 10 characters), followed by at least one space 
character. The sequence is then displayed in upper or lower cases, '-' denotes gaps. 
The residue number may be displayed at the end of the first line of each block.

<<clustalf,eval=T>>=
clustalf <-system.file("sequences/test.aln", package = "seqinr")
cat(readLines(clustalf), sep = "\n")
@

\subsubsection{phylip}

PHYLIP is a tree construction program \cite{PHYLIP}. The format is as follows: the number of 
sequences and their length (in characters) is on the first line of the file. The 
alignment is displayed in an interleaved or sequential format. The sequence 
names are limited to 10 characters and may contain blanks.

<<phylipf,eval=T>>=
phylipf <- system.file("sequences/test.phylip", package = "seqinr")
cat(readLines(phylipf), sep = "\n")
@

\subsubsection{msf}

MSF is the multiple sequence alignment format of the GCG sequence analysis 
package (\url{http://www.accelrys.com/products/gcg/index.html}). 
It begins with the line (all uppercase) 
!!NA\_MULTIPLE\_ALIGNMENT 1.0 for nucleic acid sequences or 
!!AA\_MULTIPLE\_ALIGNMENT 1.0 for amino acid sequences. Do not edit 
or delete the file type if its present (optional). A description line which 
contains informative text describing what is in the file. You can add 
this information to the top of the MSF file using a text editor (optional). 
A dividing line which contains the number of bases or residues in the 
sequence, when the file was created, and importantly, two dots (..) 
which act as a divider between the descriptive information and the 
following sequence information (required). msf files contain some other 
information: the Name/Weight, a Separating Line which must 
include two slashes (//) to divide the name/weight information 
from the sequence alignment (required) and the multiple 
sequence alignment.

<<msff,eval=T>>=
msff <- system.file("sequences/test.msf", package = "seqinr")
cat(readLines(msff), sep = "\n")
@

\subsubsection{FASTA}

Sequence in fasta format begins with a single-line description (distinguished 
by a greater-than (>) symbol), followed by sequence data on the next line.

<<fastaf,eval=T>>=
fastaf <- system.file("sequences/Anouk.fasta", package = "seqinr")
cat(readLines(fastaf), sep = "\n")
@

\subsection{The function \texttt{read.alignment()}}

Aligned sequence data are very important in evolutionary studies,
in this representation all vertically aligned positions are supposed
to be homologous, that is sharing a common ancestor. This is a
mandatory starting point for comparative studies. 
There is a function in \seqinr{} called \texttt{read.alignment()} to 
read aligned sequences data from various formats  (\texttt{mase}, 
\texttt{clustal}, \texttt{phylip}, \texttt{fasta} or \texttt{msf})
produced by common external programs for multiple sequence alignment.

<<examplereadalignment,eval=T>>=
example(read.alignment)
@

%The data returned by \texttt{read.alignment()} are of class
%alignment. Whereas sequences are stored as vector of character for the
%class \texttt{"SeqFastadna"}, \texttt{"SeqFastaAA"} and  \texttt{"SeqAcnucWeb"},
%they are stored as vector of strings for the class \texttt{"alignment"}.

\subsection{A simple example with the louse-gopher data}

Let's give an example. The gene coding for the mitochondrial cytochrome oxidase I 
is essential and therefore often used in phylogenetic studies because of its
ubiquitous nature. The following two sample tests
of aligned sequences of this gene (extracted from ParaFit \cite{parafit}), 
are distributed along with the \seqinr{} package:

<<readaln,eval=T>>=
louse <- read.alignment(system.file("sequences/louse.fasta", package = "seqinr"), format = "fasta")
louse$nam
gopher <- read.alignment(system.file("sequences/gopher.fasta", package = "seqinr"), format = "fasta")
gopher$nam
@

\begin{figure}[htbp]
   \begin{center}
   \begin{tabular}{cc}
      \includegraphics[width=0.5\textwidth]{../figs/louse}&
      \includegraphics[width=0.5\textwidth]{../figs/gopher}\\
   \end{tabular}
   \end{center}
   \caption{Louse (left) and gopher (right). 
   Images are from the wikipedia (\protect\url{http://www.wikipedia.org/}).
   The picture of the chewing louse \textit{Damalinia limbata} found on Angora goats
   was taken by Fiorella Carnevali (ENEA, Italy). The gopher drawing is from
   Gustav M{\"u}tzel, Brehms Tierleben, Small Edition 1927.}
   \label{lousegopher}
\end{figure}

The aligned sequences are now imported in your \Rlogo{}~environment.
The $8$ genes of the first sample are from various species of louse (insects parasitics
on warm-blooded animals) and the $8$ genes of the second sample are from their corresponding
gopher hosts (a subset of rodents), see figure \ref{lousegopher} :

<<names,eval=T>>=
l.names <- readLines(system.file("sequences/louse.names", package = "seqinr"))
l.names
g.names <- readLines(system.file("sequences/gopher.names", package = "seqinr"))
g.names
@

\Seqinr{} has very few methods devoted to phylogenetic analyses but many are
available in the \texttt{ape} package \cite{ape2004}. This allows for a very fine tuning
of the graphical outputs of the analyses thanks to the power of the \Rlogo{}
facilities. For instance, a natural question
here would be to compare the topology of the tree of the hosts and their
parasites to see if we have congruence between host and parasite evolution.
In other words, we want to display two phylogenetic trees face to face. This
would be tedious with a program devoted to the display of a single phylogenetic
tree at time, involving a lot of manual copy/paste operations, hard to reproduce,
and then boring to maintain with data updates.

How does it looks under \Rlogo{}? First, we need to \emph{infer} the 
tree topologies
from data. Let's try as an \emph{illustration} the famous neighbor-joining tree estimation 
of Saitou and Nei \cite{nj} with Jukes and Cantor's correction \cite{JC}
for multiple substitutions.

<<calculnjsurJC,eval=T>>=
library(ape)
louse.JC <- dist.dna(as.DNAbin(louse), model = "JC69")
gopher.JC <- dist.dna(as.DNAbin(gopher), model = "JC69")
l <- nj(louse.JC)
g <- nj(gopher.JC)
@ 

Now we have an estimation for \emph{illustrative} purposes of the tree topology for the parasite 
and their hosts. We want to plot the two trees face to face, and for this we must change 
R graphical parameters. The first thing to do is to save the current graphical parameter
settings so as to be able to restore them later:

<<savegraphicalparameters,eval=T>>=
op <- par(no.readonly = TRUE)
@

The meaning of the \texttt{no.readonly = TRUE} option here is that graphical
parameters are not all settable, we just want to save those we can change at will. Now,
we can play with graphics :

\setkeys{Gin}{width=\textwidth}
<<face2face, fig=TRUE, width=16, height=8,eval=T>>=
g$tip.label <- paste(1:8, g.names)
l$tip.label <- paste(1:8, l.names)

layout(matrix(data = 1:2, nrow = 1, ncol = 2), width=c(1.4, 1))
par(mar=c(2,1,2,1))
plot(g, adj = 0.8, cex = 1.4, use.edge.length=FALSE, 
  main = "gopher (host)", cex.main = 2)
plot(l,direction="l", use.edge.length=FALSE, cex = 1.4,
  main = "louse (parasite)", cex.main = 2)                                         
@
\setkeys{Gin}{width=0.8\textwidth}

We now restore the old graphical settings that were previously saved:

<<restoregraphicalparameters,eval=T>>=
par(op)
@

OK, this may look a little bit obscure if you are not fluent in programming, but please
try the following experiment. In your current working directory, that is in the
directory given by the \texttt{getwd()} command, create a text file called
\texttt{essai.r} with your favourite text editor, and copy/paste the previous \Rlogo{}
commands, that is :

\tiny
\begin{verbatim}
louse <- read.alignment(system.file("sequences/louse.fasta", package = "seqinr"), format = "fasta")
gopher <- read.alignment(system.file("sequences/gopher.fasta", package = "seqinr"), format = "fasta")
l.names <- readLines(system.file("sequences/louse.names", package = "seqinr"))
g.names <- readLines(system.file("sequences/gopher.names", package = "seqinr"))
library(ape)
louse.JC <- dist.dna(as.DNAbin(louse), model = "JC69")
gopher.JC <- dist.dna(as.DNAbin(gopher), model = "JC69")
l <- nj(louse.JC)
g <- nj(gopher.JC)
g$tip.label <- paste(1:8, g.names)
l$tip.label <- paste(1:8, l.names)
layout(matrix(data = 1:2, nrow = 1, ncol = 2), width=c(1.4, 1))
par(mar=c(2,1,2,1))
plot(g, adj = 0.8, cex = 1.4, use.edge.length=FALSE, 
  main = "gopher (host)", cex.main = 2)
plot(l,direction="l", use.edge.length=FALSE, cex = 1.4,
  main = "louse (parasite)", cex.main = 2)       
\end{verbatim} 
\normalsize

Make sure that your text has been saved and then go back to \Rlogo{}~console to enter
the command :

\scriptsize
\begin{verbatim}
source("essai.r")
\end{verbatim}
\normalsize

This should reproduce the previous face-to-face phylogenetic trees in your \Rlogo{}~graphical device. 
Now, your boss is unhappy with working with the Jukes and Cantor's model \cite{JC}
and wants you to use the Kimura's 2-parameters distance \cite{K80} instead.
Go back to the text editor to change \texttt{model = "JC69"} by \texttt{model = "K80"},
save the file, and in the \Rlogo{}~console \texttt{source("essai.r")} again, you should
obtain the following graph :

\setkeys{Gin}{width=\textwidth}
<<K80, fig=TRUE, echo=F, results=hide, width=16, height=8,eval=T>>=
louse.K80 <- dist.dna(x = as.DNAbin(louse), model = "K80")
gopher.K80 <- dist.dna(x = as.DNAbin(gopher), model = "K80")
l <- nj(louse.K80)
g <- nj(gopher.K80)
g$tip.label <- paste(1:8, g.names)
l$tip.label <- paste(1:8, l.names)
layout(matrix(data = 1:2, nrow = 1, ncol = 2), width=c(1.4, 1))
par(mar=c(2,1,2,1))
plot(g, adj = 0.8, cex = 1.4, use.edge.length=FALSE, 
  main = "gopher (host)", cex.main = 2)
plot(l,direction="l", use.edge.length=FALSE, cex = 1.4,
  main = "louse (parasite)", cex.main = 2)        
@
\setkeys{Gin}{width=0.8\textwidth}

Now, something even worst, there was a error in the
aligned sequence set: the first base in the first sequence in the file
\texttt{louse.fasta} is not a C but a T. To locate the file on your system,
enter the following command:

<<whereislouse,fig=F,eval=T>>=
system.file("sequences/louse.fasta", package = "seqinr")
@

Open the \texttt{louse.fasta} file
in your text editor, fix the error, go back to the \Rlogo{}~console to
\texttt{source("essai.r")} again. That's all, your graph is now consistent with
the updated dataset.

\SweaveInput{../config/sessionInfo.rnw}


% END - DO NOT REMOVE THIS LINE

%%%%%%%%%%%%  BIBLIOGRAPHY %%%%%%%%%%%%%%%%%
\clearpage
\addcontentsline{toc}{section}{References}
\bibliographystyle{plain}
\bibliography{../config/book}
\end{document}
